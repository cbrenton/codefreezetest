name: Check Code Freeze

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-freeze:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      # statuses: write  # Add permission to create status checks

    steps:
      - uses: actions/checkout@v4

      - name: Get PR SHA
        id: pr
        uses: actions/github-script@v6
        with:
          debug: true
          script: |
            console.log('Event name:', context.eventName);
            console.log('Event payload:', JSON.stringify(context.payload, null, 2));
            
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else {
              prNumber = context.payload.issue.number;
            }
            core.exportVariable('PR_NUMBER', prNumber);

      - name: Check freeze status
        id: check-freeze
        run: |
          # Fetch the main branch
          git fetch origin main
          
          # Check if code_freeze.yaml exists in main and read its content
          if git show origin/main:code_freeze.yaml > /dev/null 2>&1; then
            FREEZE_ACTIVE=$(git show origin/main:code_freeze.yaml | yq eval '.active')
            if [ "$FREEZE_ACTIVE" = "true" ]; then
              echo "is_frozen=true" >> $GITHUB_OUTPUT
            else
              echo "is_frozen=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_frozen=false" >> $GITHUB_OUTPUT
          fi

      - name: Add freeze override comment
        if: steps.check-freeze.outputs.is_frozen == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER,
            });

            // Check if we already added a freeze comment
            const hasExistingComment = comments.some(comment => 
              comment.body.includes('⚠️ **Code Freeze Active** ⚠️')
            );

            if (!hasExistingComment) {
              await github.rest.issues.createComment({
                issue_number: process.env.PR_NUMBER,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: [
                  '⚠️ **Code Freeze Active** ⚠️',
                  '',
                  'This PR was opened during an active code freeze. To proceed:',
                  '',
                  '- [ ] I acknowledge there is an active code freeze',
                  '- [ ] **EITHER** I have approval to override the code freeze **OR** the code freeze has ended',
                  '',
                  'Once completed, request approval from the appropriate team member.'
                ].join('\n')
              });
            }

      # - name: Check for override approval when freeze is active
      #   if: steps.check-freeze.outputs.is_frozen == 'true'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: process.env.PR_NUMBER,
      #       });

      #       // Look for a comment with all checkboxes checked
      #       const hasOverrideApproval = comments.some(comment => {
      #         console.log('Checking comment:', comment.body);
              
      #         // First check if this is a code freeze override form
      #         if (!comment.body.includes('**Code Freeze Active**')) {
      #           console.log('Skipping comment - not a code freeze override form');
      #           return false;
      #         }
              
      #         const checkboxPattern = /- \[x\]/gi;
      #         const matches = (comment.body.match(checkboxPattern) || []).length;
      #         console.log('Found', matches, 'checked checkboxes in code freeze override form');
      #         return matches >= 2; // At least the first two checkboxes must be checked
      #       });

      #       console.log('Override approval status:', hasOverrideApproval);

      #       // Create status check
      #       const status = {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         sha: process.env.PR_SHA,
      #         context: 'Code Freeze Check',
      #         state: hasOverrideApproval ? 'success' : 'pending',
      #         description: hasOverrideApproval 
      #           ? 'Override approved'
      #           : 'Requires code freeze override approval'
      #       };
            
      #       console.log('Creating status check with:', JSON.stringify(status, null, 2));
      #       await github.rest.repos.createCommitStatus(status);

      # - name: Set success status when no freeze
      #   if: steps.check-freeze.outputs.is_frozen != 'true'
      #   uses: actions/github-script@v6
      #   with:
      #     debug: true
      #     script: |
      #       const status = {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         sha: process.env.PR_SHA,
      #         context: 'Code Freeze Check',
      #         state: 'success',
      #         description: 'No active code freeze'
      #       };
            
      #       console.log('Creating success status with:', JSON.stringify(status, null, 2));
      #       await github.rest.repos.createCommitStatus(status);
